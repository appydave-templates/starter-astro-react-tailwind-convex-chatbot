---
// Better Auth UI Password Reset Page
// Password reset page using Better Auth UI components
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Reset your password - Set a new password for your AI Starter Template account." />
    <title>Reset Password - AI Starter Template</title>
    
    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Reset Password - AI Starter Template" />
    <meta property="og:description" content="Set a new password for your account." />
    <meta property="og:url" content={Astro.url} />
    
    <!-- Prevent indexing of auth pages -->
    <meta name="robots" content="noindex, nofollow" />
  </head>
  <body class="bg-gradient-to-br from-blue-50 via-white to-purple-50 min-h-screen">
    <!-- Header -->
    <header class="bg-white/80 backdrop-blur-sm border-b border-gray-200 sticky top-0 z-10">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center">
            <a href="/" class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              AI Starter
            </a>
          </div>
          <div class="flex items-center space-x-4">
            <a 
              href="/sign-in"
              class="text-gray-700 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors"
            >
              Back to Sign In
            </a>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="flex items-center justify-center min-h-[calc(100vh-4rem)] py-12 px-4 sm:px-6 lg:px-8">
      <div class="max-w-md w-full">
        <!-- Header -->
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold text-gray-900 mb-2">Set new password</h1>
          <p class="text-gray-600">
            Enter a strong password for your account
          </p>
        </div>

        <!-- Form Container -->
        <div id="reset-password-container" class="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
          <!-- Loading skeleton -->
          <div class="animate-pulse">
            <div class="space-y-4">
              <div class="h-10 bg-gray-200 rounded-lg"></div>
              <div class="h-10 bg-gray-200 rounded-lg"></div>
              <div class="h-2 bg-gray-200 rounded"></div>
              <div class="h-12 bg-gray-200 rounded-lg"></div>
            </div>
          </div>
        </div>

        <!-- Footer Links -->
        <div class="text-center mt-8 space-y-4">
          <div class="text-sm text-gray-600">
            Remember your password?{' '}
            <a href="/sign-in" class="text-blue-600 hover:text-blue-500 underline">
              Sign in here
            </a>
          </div>
          
          <div class="flex justify-center space-x-6 text-sm text-gray-500">
            <a href="/help" class="hover:text-gray-700 transition-colors">Help</a>
            <a href="/contact" class="hover:text-gray-700 transition-colors">Contact</a>
            <a href="/about" class="hover:text-gray-700 transition-colors">About</a>
          </div>
        </div>
      </div>
    </main>

    <!-- Password Reset -->
    <script is:inline>
      // Get token from URL params
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get('token') || '';
      const container = document.getElementById('reset-password-container');

      if (container) {
        if (!token) {
          // Invalid token - show error
          container.innerHTML = `
            <div class="text-center space-y-4">
              <div class="mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
                <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </div>
              <h3 class="text-lg font-semibold text-gray-900">Invalid Reset Link</h3>
              <p class="text-gray-600">This password reset link is invalid or has expired. Please request a new one.</p>
              <a href="/forgot-password" class="inline-flex justify-center py-2 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                Request New Reset Link
              </a>
            </div>
          `;
        } else {
          // Valid token - show password reset form
          container.innerHTML = `
            <form id="reset-form" class="space-y-4">
              <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-2">New Password</label>
                <div class="relative">
                  <input id="password" type="password" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-10" placeholder="Enter your new password" required minlength="8" />
                  <button type="button" id="toggle-password" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  </button>
                </div>
                <div id="password-strength" class="mt-2 hidden">
                  <div class="flex items-center space-x-2">
                    <div class="flex-1 bg-gray-200 rounded-full h-2">
                      <div id="strength-bar" class="h-2 rounded-full transition-all duration-300 bg-red-500" style="width: 0%"></div>
                    </div>
                    <span id="strength-text" class="text-xs text-gray-600">Too Short</span>
                  </div>
                </div>
              </div>

              <div>
                <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-2">Confirm New Password</label>
                <div class="relative">
                  <input id="confirmPassword" type="password" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-10" placeholder="Confirm your new password" required />
                  <button type="button" id="toggle-confirm-password" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                    <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                  </button>
                </div>
                <div id="password-match" class="mt-1 hidden">
                  <div class="flex items-center text-green-600 text-xs">
                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                    Passwords match
                  </div>
                </div>
              </div>

              <button type="submit" id="submit-btn" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors" disabled>
                Update password
              </button>
            </form>

            <div class="text-center mt-4">
              <p class="text-sm text-gray-600">Your password should be at least 8 characters long and include a mix of letters, numbers, and symbols.</p>
            </div>
          `;

          const passwordInput = document.getElementById('password');
          const confirmPasswordInput = document.getElementById('confirmPassword');
          const submitBtn = document.getElementById('submit-btn');
          const strengthBar = document.getElementById('strength-bar');
          const strengthText = document.getElementById('strength-text');
          const strengthContainer = document.getElementById('password-strength');
          const matchContainer = document.getElementById('password-match');

          // Password strength calculation
          function calculatePasswordStrength(pwd) {
            let strength = 0;
            if (pwd.length >= 8) strength += 1;
            if (/[A-Z]/.test(pwd)) strength += 1;
            if (/[a-z]/.test(pwd)) strength += 1;
            if (/[0-9]/.test(pwd)) strength += 1;
            if (/[^A-Za-z0-9]/.test(pwd)) strength += 1;
            return strength;
          }

          const strengthColors = ['bg-red-500', 'bg-red-400', 'bg-yellow-500', 'bg-blue-500', 'bg-green-500'];
          const strengthLabels = ['Very Weak', 'Weak', 'Fair', 'Good', 'Strong'];

          // Toggle password visibility
          document.getElementById('toggle-password').addEventListener('click', () => {
            const type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
          });

          document.getElementById('toggle-confirm-password').addEventListener('click', () => {
            const type = confirmPasswordInput.type === 'password' ? 'text' : 'password';
            confirmPasswordInput.type = type;
          });

          // Password strength indicator
          passwordInput.addEventListener('input', () => {
            const password = passwordInput.value;
            if (password) {
              strengthContainer.classList.remove('hidden');
              const strength = calculatePasswordStrength(password);
              strengthBar.className = `h-2 rounded-full transition-all duration-300 ${strengthColors[strength - 1] || 'bg-gray-200'}`;
              strengthBar.style.width = `${(strength / 5) * 100}%`;
              strengthText.textContent = strengthLabels[strength - 1] || 'Too Short';
            } else {
              strengthContainer.classList.add('hidden');
            }
            updateSubmitButton();
          });

          // Password match indicator
          confirmPasswordInput.addEventListener('input', () => {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            if (confirmPassword) {
              if (password === confirmPassword) {
                matchContainer.classList.remove('hidden');
                matchContainer.innerHTML = `
                  <div class="flex items-center text-green-600 text-xs">
                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                    </svg>
                    Passwords match
                  </div>
                `;
              } else {
                matchContainer.classList.remove('hidden');
                matchContainer.innerHTML = `
                  <div class="flex items-center text-red-600 text-xs">
                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                    </svg>
                    Passwords do not match
                  </div>
                `;
              }
            } else {
              matchContainer.classList.add('hidden');
            }
            updateSubmitButton();
          });

          function updateSubmitButton() {
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            const strength = calculatePasswordStrength(password);
            
            const isValid = password && confirmPassword && password === confirmPassword && strength >= 3;
            submitBtn.disabled = !isValid;
          }

          // Form submission
          document.getElementById('reset-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const password = passwordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            
            if (!password || !confirmPassword) {
              showNotification('Please fill in all fields', 'error');
              return;
            }

            if (password !== confirmPassword) {
              showNotification('Passwords do not match', 'error');
              return;
            }

            if (calculatePasswordStrength(password) < 3) {
              showNotification('Please choose a stronger password', 'error');
              return;
            }

            // Show loading state
            submitBtn.disabled = true;
            submitBtn.textContent = 'Updating password...';
            
            try {
              // Simulate API call
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              // Show success
              showNotification('Password updated successfully! Redirecting to sign in...', 'success');
              
              // Redirect after delay
              setTimeout(() => {
                window.location.href = '/sign-in';
              }, 2000);
            } catch (error) {
              showNotification('Failed to update password. Please try again.', 'error');
            } finally {
              // Reset button
              submitBtn.disabled = false;
              submitBtn.textContent = 'Update password';
            }
          });
        }
      }

      function showNotification(message, type = 'info', duration = 5000) {
        const notification = document.createElement('div');
        const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';
        notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg z-50`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, duration);
      }
    </script>

    <!-- Background Decoration -->
    <div class="fixed inset-0 -z-10 overflow-hidden">
      <div class="absolute -top-40 -right-32 w-96 h-96 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
      <div class="absolute -bottom-32 -left-40 w-96 h-96 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
    </div>

    <style>
      @keyframes blob {
        0%, 100% {
          transform: translate(0px, 0px) scale(1);
        }
        33% {
          transform: translate(30px, -50px) scale(1.1);
        }
        66% {
          transform: translate(-20px, 20px) scale(0.9);
        }
      }
      .animate-blob {
        animation: blob 7s infinite;
      }
      .animation-delay-2000 {
        animation-delay: 2s;
      }
      .animation-delay-4000 {
        animation-delay: 4s;
      }
    </style>
  </body>
</html>